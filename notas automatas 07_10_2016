***Gràmaticas libres de contexto
-Por definiciòn son recursivas
-se usa para definir las expresiones validas en un lenguaje de programaciòn
-Nosotros lo usaremos para definir las expresiones regulares de nuestro lenguaje (+-/*.  etc)

digito = [0-9]
Entero = digito+



exp = expresiòn aritmetica
exp -> exp op exp   |  (exp)  | ENTERO
op -> + | - | * | /


Ejemplo...

(2+4)*5


exp => exp op exp                   [exp-> exp op exp]
exp => exp op ENTERO                [exp-> ENTERO]
exp => exp * ENTERO                 [op-> *]
exp => (exp) * ENTERO               [exp-> (exp)]
exp => (exp op exp) * ENTERO        [exp-> exp op exp]
exp => (exp op ENTERO) * ENTERO     [exp-> ENTERO]
exp => (exp + ENTERO) * ENTERO      [op-> +]
exp => (ENTERO + ENTERO) * ENTERO   [exp-> ENTERO]

Para este ejemplo se hizo la derivación por la derecha



Ejemplo 2...

(7*2)-(8*4)


exp => exp op exp                             [exp-> exp op exp]
exp => (exp) op exp                           [exp-> (exp)]
exp => (exp op exp) op exp                    [exp-> exp op exp]
exp => (ENTERO op exp) op exp                 [exp-> ENTERO]
exp => (ENTERO * exp) op exp                  [op-> *]
exp => (ENTERO * ENTERO) op exp               [exp-> ENTERO]
exp => (ENTERO * ENTERO) - exp                [op-> -]
exp => (ENTERO * ENTERO) - (exp)              [exp-> (exp)]
exp => (ENTERO * ENTERO) - (exp op exp)       [exp-> exp op exp]
exp => (ENTERO * ENTERO) - (ENTERO op exp)    [exp-> ENTERO]
exp => (ENTERO * ENTERO) - (ENTERO * exp)     [op-> *]
exp => (ENTERO * ENTERO) - (ENTERO * ENTERO)  [exp-> ENTERO]


Para este ejemplo se hizo la derivación por la izquierda



Ejemplo 3...
 
E -> (E) | a

(aaaa)

E => (E)    [E -> (E)]o
E => (a)  [E -> a]  ***No aplica la regla


(a)aaa

E => (E)   [E -> (E)]
E => (a)  [E -> a]  ***No aplica la regla










